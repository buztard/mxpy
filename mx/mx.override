%%
headers
#define NO_IMPORT_PYGOBJECT
#include <Python.h>               
#include "pygobject.h"
#include <mx/mx.h>
#include <mx/mx-gtk.h>

/* This should be fixed in mx upstream */
#define MX_H_INSIDE
#include <mx/mx-box-layout-child.h>
#include <mx/mx-subtexture.h>
#include <mx/mx-notebook.h>

%%
modulename mx                     
%%
import gobject.GObject as PyGObject_Type
import clutter.Actor as PyClutterActor_Type       
import clutter.Texture as PyClutterTexture_Type
import clutter.Model as PyClutterModel_Type
import clutter.ChildMeta as PyClutterChildMeta_Type
import clutter.Text as PyClutterText_Type
import clutter.Stage as PyClutterStage_Type
import gtk.Widget as PyGtkWidget_Type
import gtk.Bin as PyGtkBin_Type
import gtk.Frame as PyGtkFrame_Type
import gtk.DrawingArea as PyGtkDrawingArea_Type
%%
ignore-glob
  *_get_type                            
%%
ignore
  mx_clipboard_get_text
  mx_style_get_valist
  mx_action_new_full
  mx_button_group_foreach
  mx_button_new_with_label
  mx_icon_theme_lookup
%%
new-constructor MX_TYPE_WIDGET
%%
override mx_widget_get_padding noargs
static PyObject *
_wrap_mx_widget_get_padding (PyGObject *self)
{
  MxPadding padding;

  mx_widget_get_padding (MX_WIDGET (self->obj), &padding);

  return Py_BuildValue ("(ffff)", 
                        padding.top, padding.right,
                        padding.bottom, padding.left);
}
%%
override mx_widget_long_press_query
static PyObject *
_wrap_mx_widget_long_press_query (PyGObject *self,
                                  PyObject  *args,
                                  PyObject  *kwargs)
{
    static char *kwlist[] = { "event", NULL };
    PyObject *py_event;
    ClutterEvent *event = NULL;

    if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                      "O:Mx.Widget.long_press_query",
                                      kwlist, &py_event))
        return NULL;

    if (pyg_boxed_check (py_event, CLUTTER_TYPE_EVENT))
        event = pyg_boxed_get (py_event, ClutterEvent);
    else {
        PyErr_SetString (PyExc_TypeError, "event should be a ClutterEvent");
        return NULL;
    }
    
    mx_widget_long_press_query (MX_WIDGET (self->obj),
                                (ClutterButtonEvent *)event);
    
    Py_INCREF(Py_None);
    return Py_None;
}

%%
override mx_bin_get_alignment noargs
static PyObject *
_wrap_mx_bin_get_alignment (PyGObject *self)
{
  MxAlign x_align, y_align;

  mx_bin_get_alignment (MX_BIN (self->obj), &x_align, &y_align);

  return Py_BuildValue ("(OO)",
                        pyg_enum_from_gtype (MX_TYPE_ALIGN, x_align),
                        pyg_enum_from_gtype (MX_TYPE_ALIGN, y_align));
}
%%
override mx_bin_get_fill noargs
static PyObject *
_wrap_mx_bin_get_fill (PyGObject *self)
{
  gboolean x_fill, y_fill;

  mx_bin_get_fill (MX_BIN (self->obj), &x_fill, &y_fill);

  return Py_BuildValue ("(ii)", x_fill, y_fill);
}
%%
override mx_viewport_get_origin noargs
static PyObject *
_wrap_mx_viewport_get_origin (PyGObject *self)
{
  gfloat x, y, z;
  x = y = z = 0;

  mx_viewport_get_origin (MX_VIEWPORT (self->obj), &x, &y, &z);

  return Py_BuildValue ("(iii)", x, y, z);
}
%%
override mx_adjustment_get_values noargs
static PyObject *
_wrap_mx_adjustment_get_values (PyGObject *self)
{
  gdouble value, lower, upper, step_increment, page_increment, page_size;

  mx_adjustment_get_values (MX_ADJUSTMENT (self->obj),
                              &value, &lower, &upper, &step_increment,
                              &page_increment, &page_size);

  return Py_BuildValue ("(dddddd)", value, lower, upper, step_increment,
                        page_increment, page_size);
}
%%
override mx_draggable_get_containment_area noargs
static PyObject *
_wrap_mx_draggable_get_containment_area (PyGObject *self)
{
  gfloat x_1, y_1, x_2, y_2;

  mx_draggable_get_containment_area (MX_DRAGGABLE (self->obj),
                                       &x_1, &y_1, &x_2, &y_2);

  return Py_BuildValue ("(ffff)", x_1, y_1, x_2, y_2);
}
%%
override mx_subtexture_get_frame noargs
static PyObject *
_wrap_mx_subtexture_get_frame (PyGObject *self)
{
  gint top, left, width, height;
  top = left = width = height = 0;

  mx_subtexture_get_frame (MX_SUBTEXTURE (self->obj),
                             &top, &left, &width, &height);

  return Py_BuildValue ("(iiii)", top, left, width, height);
}
%%
override mx_texture_frame_get_frame noargs
static PyObject *
_wrap_mx_texture_frame_get_frame (PyGObject *self)
{
  gfloat top, right, bottom, left;
  top = right = bottom = left = 0.f;

  mx_texture_frame_get_frame (MX_TEXTURE_FRAME (self->obj),
                                &top, &right, &bottom, &left);

  return Py_BuildValue ("(ffff)", top, right, bottom, left);
}
%%
override mx_gtk_expander_set_label_widget
static PyObject *
_wrap_mx_gtk_expander_set_label_widget (PyGObject *self, PyObject *args)
{
  GtkWidget *widget;

  if (!PyArg_ParseTuple (args, "O!mx.GtkExpander.set_label_widget",
                         &PyGtkWidget_Type, &widget))
    return NULL;

  mx_gtk_expander_set_label_widget (MX_GTK_EXPANDER (self->obj), widget);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override mx_gtk_expander_get_label_widget noargs
static PyObject *
_wrap_mx_gtk_expander_get_label_widget (PyGObject *self)
{
  GtkWidget *widget;

  widget = mx_gtk_expander_get_label_widget (MX_GTK_EXPANDER (self->obj));

  return pygobject_new ((GObject *)widget);
}
%%
override mx_table_add_actor_with_properties
static PyObject * 
_wrap_mx_table_add_actor_with_properties (PyGObject *self, PyObject *args)
{
  PyGObject    *py_child;
  ClutterActor *child;
  gint len, i, row, column;
  MxTable *table;
  GObjectClass *klass;

  if ((len = PyTuple_Size (args)) < 3) {
      PyErr_SetString (PyExc_TypeError,
                       "requires at least three arguments");
      return NULL;
  }

  py_child = (PyGObject*) PyTuple_GetItem (args, 0);
  if (!pygobject_check (py_child, &PyClutterActor_Type)) {
      PyErr_SetString (PyExc_TypeError, 
                       "first argument must be a clutter.Actor");
      return NULL;
  }

  if (PyLong_Check (PyTuple_GetItem (args, 1)))
      row = PyLong_AsLong (PyTuple_GetItem (args, 1));
  else if (PyInt_Check (PyTuple_GetItem (args, 1)))
      row = PyInt_AsLong (PyTuple_GetItem (args, 1));
  else {
      PyErr_SetString (PyExc_TypeError,
                       "second argument must be an integer");
      return NULL;
  }

  if (PyLong_Check (PyTuple_GetItem (args, 2)))
      column = PyLong_AsLong (PyTuple_GetItem (args, 2));
  else if (PyInt_Check (PyTuple_GetItem (args, 2)))
      column = PyInt_AsLong (PyTuple_GetItem (args, 2));
  else {
      PyErr_SetString (PyExc_TypeError,
                       "third argument must be an integer");
      return NULL;
  }

  table = MX_TABLE (self->obj);
  child = CLUTTER_ACTOR (py_child->obj);

  if ((len - 3) % 2) {
      PyErr_SetString (PyExc_TypeError,
                       "Argument list must be property, value pairs");
      return NULL;
  }

  klass = G_OBJECT_GET_CLASS (self->obj);

  mx_table_add_actor (table, child, row, column);

  for (i = 3; i < len; i += 2) {
      PyObject *py_property = PyTuple_GetItem (args, i);
      PyObject *py_value = PyTuple_GetItem (args, i + 1);
      gchar *property_name;
      GParamSpec *pspec;
      GValue value = { 0, };

      if (!PyString_Check (py_property)) {
          PyErr_SetString (PyExc_TypeError,
                           "Expected string argument for property");
          return NULL;
      }

      property_name = PyString_AsString (py_property);

      pspec = clutter_container_class_find_child_property (klass, 
                                                           property_name);

      if (!pspec) {
          PyErr_SetString (PyExc_TypeError, "child does not have property");
          return NULL;
      }

      g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (pspec));

      if (pyg_value_from_pyobject (&value, py_value)) {
          PyErr_SetString (PyExc_TypeError, "Can't convert to GValue");
          return NULL;
      }

      clutter_container_child_set_property (CLUTTER_CONTAINER (table),
                                            CLUTTER_ACTOR (child),
                                            property_name, &value);

      g_value_unset (&value);
  }

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override mx_style_get
static PyObject *
_wrap_mx_style_get (PyGObject *self, PyObject *args)
{
  PyGObject *py_child;
  gint len, i;
  PyObject *py_ret;
  
  if ((len = PyTuple_Size (args)) < 1) {
      PyErr_SetString (PyExc_TypeError, "requires at least one argument");
      return NULL;
  }

  py_child = (PyGObject *) PyTuple_GetItem (args, 0);
  if (!pygobject_check (py_child, &PyMxStylable_Type)) {
      PyErr_SetString (PyExc_TypeError, 
                       "first argument must be a mx.Stylable");
      return NULL;
  }

  py_ret = PyTuple_New (len - 1);
  for (i = 1; i < len; i++) {
      PyObject *py_property = PyTuple_GetItem (args, i);
      gchar *property_name;
      GParamSpec *pspec;
      GValue value = { 0, };

      if (!PyString_Check (py_property)) {
          PyErr_SetString (PyExc_TypeError,
                           "Expected string argument for property");
          return NULL;
      }

      property_name = PyString_AsString (py_property);
      pspec = mx_stylable_find_property (MX_STYLABLE (py_child->obj),
                                            property_name);

      if (!pspec) {
          PyErr_SetString (PyExc_TypeError,
                           "invalid property name");
          return NULL;
      }

      g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (pspec));
      mx_style_get_property (MX_STYLE (self->obj),
                               MX_STYLABLE (py_child->obj),
                               pspec, &value);

      PyTuple_SetItem (py_ret, i-1,
                       pyg_value_as_pyobject (&value, TRUE));

      g_value_unset (&value);
  }

  return py_ret;
}
%%
override mx_style_get_property
static PyObject *
_wrap_mx_style_get_property (PyGObject *self, PyObject *args)
{
  gchar *property_name;
  PyGObject *py_child;
  GParamSpec *pspec;
  GValue value = { 0, };

  if (!PyArg_ParseTuple (args, "O!s:mx.Stylable.get_property",
                         &PyMxStylable_Type, &py_child,
                         &property_name))
    return NULL;

  pspec = mx_stylable_find_property (MX_STYLABLE (py_child->obj),
                                       property_name);

  if (!pspec) {
      PyErr_SetString (PyExc_TypeError,
                       "invalid property name");
      return NULL;
  }

  g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (pspec));
  mx_style_get_property (MX_STYLE (self->obj),
                           MX_STYLABLE (py_child->obj),
                           pspec, &value);

  return pyg_value_as_pyobject (&value, TRUE);
}
%%
override mx_stylable_list_properties noargs
static PyObject *
_wrap_mx_stylable_list_properties (PyGObject *self)
{
  guint n_props;
  GParamSpec **properties;
  PyObject *py_properties;
  gint i;

  properties = mx_stylable_list_properties (MX_STYLABLE (self->obj),
                                              &n_props);

  py_properties = PyTuple_New (n_props);

  /* FIXME: Instead of returning a pspec it might be better to return the name 
   */
  for (i = 0; i < n_props; i++) {
      PyTuple_SetItem (py_properties, i, 
                       pyg_param_spec_new (properties[i]));
  }

  g_free (properties);

  return py_properties;
}
%%
override mx_stylable_find_property
static PyObject *
_wrap_mx_stylable_find_property (PyGObject *self, PyObject *args)
{
  const gchar *property_name;
  GParamSpec *pspec;

  if (!PyArg_ParseTuple (args, "s:mx.Stylable.find_property",
                         &property_name))
    return NULL;

  pspec = mx_stylable_find_property (MX_STYLABLE (self->obj),
                                       property_name);

  if (pspec)
    return pyg_param_spec_new (pspec);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override mx_stylable_get_viewport noargs
static PyObject *
_wrap_mx_stylable_get_viewport (PyGObject *self)
{
  gboolean ret;
  gint x, y, width, height;

  ret = mx_stylable_get_viewport (MX_STYLABLE (self->obj),
                                    &x, &y, &width, &height);

  if (ret)
    return Py_BuildValue ("(iiii)", x, y, width, height);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override mx_stylable_get_default_value
static PyObject *
_wrap_mx_stylable_get_default_value (PyGObject *self, PyObject *args)
{
  gboolean ret;
  const gchar *property_name;
  GValue value = { 0, };

  if (!PyArg_ParseTuple (args, "s:mx.Stylable.get_default_value",
                         &property_name))
    return NULL;

  ret = mx_stylable_get_default_value (MX_STYLABLE (self->obj),
                                         property_name, &value);

  if (ret)
    return pyg_value_as_pyobject (&value, TRUE);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override mx_stylable_get
static PyObject *
_wrap_mx_stylable_get (PyGObject *self, PyObject *args)
{
  gint len, i;
  PyObject *py_ret;
  
  if ((len = PyTuple_Size (args)) < 1) {
      PyErr_SetString (PyExc_TypeError, "requires at least one argument");
      return NULL;
  }

  py_ret = PyTuple_New (len);
  for (i = 0; i < len; i++) {
      PyObject *py_property = PyTuple_GetItem (args, i);
      gchar *property_name;
      GParamSpec *pspec;
      GValue value = { 0, };

      if (!PyString_Check (py_property)) {
          PyErr_SetString (PyExc_TypeError,
                           "Expected string argument for property");
          return NULL;
      }

      property_name = PyString_AsString (py_property);

      pspec = mx_stylable_find_property (MX_STYLABLE (self->obj),
                                           property_name);
      if (!pspec) {
          PyErr_SetString (PyExc_TypeError,
                           "invalid property name");
          return NULL;
      }
      g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (pspec));

      mx_stylable_get_property (MX_STYLABLE (self->obj),
                                  property_name, &value);


      PyTuple_SetItem (py_ret, i,
                       pyg_value_as_pyobject (&value, TRUE));

      g_value_unset (&value);
  }

  return py_ret;
}
%%
override mx_stylable_get_property
static PyObject *
_wrap_mx_stylable_get_property (PyGObject *self, PyObject *args)
{
  gchar *property_name;
  GParamSpec *pspec;
  GValue value = { 0, };

  if (!PyArg_ParseTuple (args, "s:mx.Stylable.get_property",
                         &property_name))
    return NULL;

  pspec = mx_stylable_find_property (MX_STYLABLE (self->obj),
                                       property_name);
  if (!pspec) {
      PyErr_SetString (PyExc_TypeError,
                       "invalid property name");
      return NULL;
  }
  g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (pspec));

  mx_stylable_get_property (MX_STYLABLE (self->obj),
                              property_name, &value);



  return pyg_value_as_pyobject (&value, TRUE);
}
%%
override MxStylable__proxy_do_get_style_id
const gchar *
_wrap_MxStylable__proxy_do_get_style_id (MxStylable *self)
{
  PyGILState_STATE state;
  PyObject *py_self, *py_method, *py_retval;
  const gchar *ret;

  state = pyg_gil_state_ensure ();
  py_self = pygobject_new ((GObject *)self);
  if (!py_self) {
      if (PyErr_Occurred ())
        PyErr_Print ();
      pyg_gil_state_release (state);
      return NULL;
  }

  py_method = PyObject_GetAttrString (py_self, "do_get_style_id");
  if (!py_method) {
      if (PyErr_Occurred ())
        PyErr_Print ();
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return NULL;
  }

  py_retval = PyObject_CallObject (py_method, NULL);
  if (!py_retval) {
      if (PyErr_Occurred ())
        PyErr_Print ();
      Py_XDECREF (py_retval);
      Py_DECREF (py_method);
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return NULL;
  }

  if (!PyString_Check (py_retval)) {
      PyErr_SetString (PyExc_TypeError,
                       "virtual method should return a string");
      Py_XDECREF (py_retval);
      Py_DECREF (py_method);
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return NULL;
  }

  ret = PyString_AsString (py_retval);

  Py_DECREF (py_retval);
  Py_DECREF (py_method);
  Py_DECREF (py_self);
  pyg_gil_state_release (state);

  return ret;
}
%%
override MxStylable__do_get_style_id
static PyObject *
_wrap_MxStylable__do_get_style_id (PyObject *cls, PyObject *args)
{
  MxStylableIface *iface;
  PyGObject *self;
  const gchar *ret = NULL;

  if (!PyArg_ParseTuple (args, "O!:mx.Stylable.get_style_id",
                         &PyMxStylable_Type, &self))
    return NULL;

  iface = g_type_interface_peek(g_type_class_peek(pyg_type_from_object(cls)),
                                MX_TYPE_STYLABLE);

  if (iface->get_style_id)
    ret = iface->get_style_id (MX_STYLABLE (self->obj));
  else {
      PyErr_SetString (PyExc_NotImplementedError,
                       "interface method mx.Stylable.get_style_id not "
                       "implemented");
      return NULL;
  }

  if (ret)
    return Py_BuildValue ("s", ret);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override MxStylable__proxy_do_get_style_type
const gchar *
_wrap_MxStylable__proxy_do_get_style_type (MxStylable *self)
{
  PyGILState_STATE state;
  PyObject *py_self, *py_method, *py_retval;
  const gchar *ret;

  state = pyg_gil_state_ensure ();
  py_self = pygobject_new ((GObject *)self);
  if (!py_self) {
      if (PyErr_Occurred ())
        PyErr_Print ();
      pyg_gil_state_release (state);
      return NULL;
  }

  py_method = PyObject_GetAttrString (py_self, "do_get_style_type");
  if (!py_method) {
      if (PyErr_Occurred ())
        PyErr_Print ();
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return NULL;
  }

  py_retval = PyObject_CallObject (py_method, NULL);
  if (!py_retval) {
      if (PyErr_Occurred ())
        PyErr_Print ();
      Py_XDECREF (py_retval);
      Py_DECREF (py_method);
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return NULL;
  }

  if (!PyString_Check (py_retval)) {
      PyErr_SetString (PyExc_TypeError,
                       "virtual method should return a string");
      Py_XDECREF (py_retval);
      Py_DECREF (py_method);
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return NULL;
  }

  ret = PyString_AsString (py_retval);

  Py_DECREF (py_retval);
  Py_DECREF (py_method);
  Py_DECREF (py_self);
  pyg_gil_state_release (state);

  return ret;
}
%%
override MxStylable__do_get_style_type
static PyObject *
_wrap_MxStylable__do_get_style_type (PyObject *cls, PyObject *args)
{
  MxStylableIface *iface;
  PyGObject *self;
  const gchar *ret = NULL;

  if (!PyArg_ParseTuple (args, "O!:mx.Stylable.get_style_type",
                         &PyMxStylable_Type, &self))
    return NULL;

  iface = g_type_interface_peek(g_type_class_peek(pyg_type_from_object(cls)),
                                MX_TYPE_STYLABLE);

  if (iface->get_style_type)
    ret = iface->get_style_type (MX_STYLABLE (self->obj));
  else {
      PyErr_SetString (PyExc_NotImplementedError,
                       "interface method mx.Stylable.get_style_type not "
                       "implemented");
      return NULL;
  }

  if (ret)
    return Py_BuildValue ("s", ret);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override MxStylable__proxy_do_get_style_class
const gchar *
_wrap_MxStylable__proxy_do_get_style_class (MxStylable *self)
{
  PyGILState_STATE state;
  PyObject *py_self, *py_method, *py_retval;
  const gchar *ret;

  state = pyg_gil_state_ensure ();
  py_self = pygobject_new ((GObject *)self);
  if (!py_self) {
      if (PyErr_Occurred ())
        PyErr_Print ();
      pyg_gil_state_release (state);
      return NULL;
  }

  py_method = PyObject_GetAttrString (py_self, "do_get_style_class");
  if (!py_method) {
      if (PyErr_Occurred ())
        PyErr_Print ();
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return NULL;
  }

  py_retval = PyObject_CallObject (py_method, NULL);
  if (!py_retval) {
      if (PyErr_Occurred ())
        PyErr_Print ();
      Py_XDECREF (py_retval);
      Py_DECREF (py_method);
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return NULL;
  }

  if (!PyString_Check (py_retval)) {
      PyErr_SetString (PyExc_TypeError,
                       "virtual method should return a string");
      Py_XDECREF (py_retval);
      Py_DECREF (py_method);
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return NULL;
  }

  ret = PyString_AsString (py_retval);

  Py_DECREF (py_retval);
  Py_DECREF (py_method);
  Py_DECREF (py_self);
  pyg_gil_state_release (state);

  return ret;
}
%%
override MxStylable__do_get_style_class
static PyObject *
_wrap_MxStylable__do_get_style_class (PyObject *cls, PyObject *args)
{
  MxStylableIface *iface;
  PyGObject *self;
  const gchar *ret = NULL;

  if (!PyArg_ParseTuple (args, "O!:mx.Stylable.get_style_class",
                         &PyMxStylable_Type, &self))
    return NULL;

  iface = g_type_interface_peek(g_type_class_peek(pyg_type_from_object(cls)),
                                MX_TYPE_STYLABLE);

  if (iface->get_style_class)
    ret = iface->get_style_class (MX_STYLABLE (self->obj));
  else {
      PyErr_SetString (PyExc_NotImplementedError,
                       "interface method mx.Stylable.get_style_class not "
                       "implemented");
      return NULL;
  }

  if (ret)
    return Py_BuildValue ("s", ret);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override MxStylable__proxy_do_get_pseudo_class
const gchar *
_wrap_MxStylable__proxy_do_get_pseudo_class (MxStylable *self)
{
  PyGILState_STATE state;
  PyObject *py_self, *py_method, *py_retval;
  const gchar *ret;

  state = pyg_gil_state_ensure ();
  py_self = pygobject_new ((GObject *)self);
  if (!py_self) {
      if (PyErr_Occurred ())
        PyErr_Print ();
      pyg_gil_state_release (state);
      return NULL;
  }

  py_method = PyObject_GetAttrString (py_self, "do_get_pseudo_class");
  if (!py_method) {
      if (PyErr_Occurred ())
        PyErr_Print ();
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return NULL;
  }

  py_retval = PyObject_CallObject (py_method, NULL);
  if (!py_retval) {
      if (PyErr_Occurred ())
        PyErr_Print ();
      Py_XDECREF (py_retval);
      Py_DECREF (py_method);
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return NULL;
  }

  if (!PyString_Check (py_retval)) {
      PyErr_SetString (PyExc_TypeError,
                       "virtual method should return a string");
      Py_XDECREF (py_retval);
      Py_DECREF (py_method);
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return NULL;
  }

  ret = PyString_AsString (py_retval);

  Py_DECREF (py_retval);
  Py_DECREF (py_method);
  Py_DECREF (py_self);
  pyg_gil_state_release (state);

  return ret;
}
%%
override MxStylable__do_get_pseudo_class
static PyObject *
_wrap_MxStylable__do_get_pseudo_class (PyObject *cls, PyObject *args)
{
  MxStylableIface *iface;
  PyGObject *self;
  const gchar *ret = NULL;

  if (!PyArg_ParseTuple (args, "O!:mx.Stylable.get_pseudo_class",
                         &PyMxStylable_Type, &self))
    return NULL;

  iface = g_type_interface_peek(g_type_class_peek(pyg_type_from_object(cls)),
                                MX_TYPE_STYLABLE);

  if (iface->get_pseudo_class)
    ret = iface->get_pseudo_class (MX_STYLABLE (self->obj));
  else {
      PyErr_SetString (PyExc_NotImplementedError,
                       "interface method mx.Stylable.get_pseudo_class not "
                       "implemented");
      return NULL;
  }

  if (ret)
    return Py_BuildValue ("s", ret);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override MxStylable__proxy_do_get_viewport
static gboolean
_wrap_MxStylable__proxy_do_get_viewport (MxStylable *self,
                                           gint         *x,
                                           gint         *y,
                                           gint         *width,
                                           gint         *height)
{
  PyGILState_STATE state;
  PyObject *py_self, *py_method, *py_retval;

  state = pyg_gil_state_ensure ();
  py_self = pygobject_new ((GObject *)self);
  if (!py_self) {
      if (PyErr_Occurred ())
        PyErr_Print ();
      pyg_gil_state_release (state);
      return FALSE;
  }

  py_method = PyObject_GetAttrString (py_self, "do_get_viewport");
  if (!py_method) {
      if (PyErr_Occurred ())
        PyErr_Print ();
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return FALSE;
  }

  py_retval = PyObject_CallObject (py_method, NULL);
  if (!py_retval) {
      if (PyErr_Occurred ())
        PyErr_Print ();
      Py_XDECREF (py_retval);
      Py_DECREF (py_method);
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return FALSE;
  }

  if ((!PyTuple_Check (py_retval)) || (PyTuple_Size (py_retval) != 4)) {
      PyErr_SetString (PyExc_TypeError,
                       "virtual method should return a 4-tuple of integers");
      Py_XDECREF (py_retval);
      Py_DECREF (py_method);
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return FALSE;
  }

  if (!PyArg_ParseTuple (py_retval, "iiii", x, y, width, height)) {
      Py_XDECREF (py_retval);
      Py_DECREF (py_method);
      Py_DECREF (py_self);
      pyg_gil_state_release (state);
      return FALSE;
  }

  Py_XDECREF (py_retval);
  Py_DECREF (py_method);
  Py_DECREF (py_self);
  pyg_gil_state_release (state);
  return TRUE;
}
%%
override MxStylable__do_get_viewport noargs
static PyObject *
_wrap_MxStylable__do_get_viewport (PyObject *cls, PyObject *args)
{
  MxStylableIface *iface;
  PyGObject *self;
  gint x, y, width, height;
  gboolean ret;

  if (!PyArg_ParseTuple (args, "O!mx.Stylable.do_get_viewport",
                         &PyMxStylable_Type, &self))
    return NULL;

  iface = g_type_interface_peek(g_type_class_peek(pyg_type_from_object(cls)),
                                MX_TYPE_STYLABLE);

  if (iface->get_viewport)
    ret = iface->get_viewport (MX_STYLABLE (self->obj),
                               &x, &y, &width, &height);
  else {
      PyErr_SetString (PyExc_NotImplementedError,
                       "interface method mx.Stylable.get_viewport not "
                       "implemented");
      return NULL;
  }

  if (ret)
    return Py_BuildValue ("(iiii)", x, y, width, height);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override mx_stylable_iface_install_property classmethod
static PyObject *
_wrap_mx_stylable_iface_install_property (PyObject *self, PyObject *args)
{
  MxStylableIface *iface;
  GType type;
  GParamSpec *pspec;
  gpointer klass;

  if ((type = pyg_type_from_object (self)) == 0)
    return NULL;

  klass = g_type_class_peek (type);
  iface = (MxStylableIface *)
    g_type_interface_peek (klass, MX_TYPE_STYLABLE);

  pspec = pyg_param_spec_from_object (args);
  mx_stylable_iface_install_property (iface, type, pspec);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override mx_scrollable_get_adjustments noargs
static PyObject *
_wrap_mx_scrollable_get_adjustments (PyGObject *self)
{
  MxAdjustment *hadj, *vadj;
  PyObject *py_hadj, *py_vadj;

  mx_scrollable_get_adjustments (MX_SCROLLABLE (self->obj),
                                   &hadj, &vadj);

  py_hadj = pygobject_new ((GObject *)hadj);
  py_vadj = pygobject_new ((GObject *)vadj);

  return Py_BuildValue ("(NN)", py_hadj, py_vadj);
}
%%
override MxScrollable__proxy_do_get_adjustments
void
_wrap_MxScrollable__proxy_do_get_adjustments (MxScrollable  *scrollable,
                                                MxAdjustment **hadjustment,
                                                MxAdjustment **vadjustment)
{
  PyGILState_STATE state;
  PyObject *self, *py_ret, *py_hadj, *py_vadj;

  state = pyg_gil_state_ensure ();
  self = pygobject_new ((GObject *)scrollable);

  py_ret = PyObject_CallMethod (self, "do_get_adjustments", "");

  if (!py_ret) {
      PyErr_Print ();
      Py_DECREF (self);
      pyg_gil_state_release (state);
      return;
  }
  Py_DECREF (self);

  if (!PyArg_ParseTuple (py_ret, "OO", &py_hadj, &py_vadj)) {
      PyErr_Print ();
      Py_DECREF (py_ret);
      pyg_gil_state_release (state);
      return;
  }
  Py_DECREF (py_ret);

  if (hadjustment) {
      if (pygobject_check (py_hadj, &PyMxAdjustment_Type))
        *hadjustment = MX_ADJUSTMENT (((PyGObject *)py_hadj)->obj);
      else if (py_hadj == Py_None)
        *hadjustment = NULL;
      else {
          PyErr_SetString (PyExc_TypeError,
                           "do_get_adjustments must return a two-tuple with "
                           "either mx.Adjustment or None");
          PyErr_Print ();
          Py_DECREF (py_hadj);
          Py_DECREF (py_vadj);
          pyg_gil_state_release (state);
          return;
      }
  }

  if (vadjustment) {
      if (pygobject_check (py_vadj, &PyMxAdjustment_Type))
        *vadjustment = MX_ADJUSTMENT (((PyGObject *)py_vadj)->obj);
      else if (py_vadj == Py_None)
        *vadjustment = NULL;
      else {
          PyErr_SetString (PyExc_TypeError,
                           "do_get_adjustments must return a two-tuple with "
                           "either mx.Adjustment or None");
          PyErr_Print ();
          Py_DECREF (py_hadj);
          Py_DECREF (py_vadj);
          pyg_gil_state_release (state);
          return;
      }
  }

  pyg_gil_state_release (state);
}
%%
override MxScrollable__do_get_adjustments
static PyObject *
_wrap_MxScrollable__do_get_adjustments (PyObject *cls, PyObject *args)
{
  MxScrollableIface *iface;
  PyGObject *self;
  PyObject *py_hadj, *py_vadj;
  MxAdjustment *hadj, *vadj;

  if (!PyArg_ParseTuple (args, "O!:Scrollable.do_get_adjustments",
                         &PyMxScrollable_Type, &self))
    return NULL;

  iface = g_type_interface_peek (g_type_class_peek (pyg_type_from_object (cls)),
                                 MX_TYPE_SCROLLABLE);

  if (iface->get_adjustments)
    iface->get_adjustments (MX_SCROLLABLE (self->obj), &hadj, &vadj);
  else {
      PyErr_SetString (PyExc_NotImplementedError,
                       "interface method Mx.Scrollable.get_adjustments "
                       "not implemented");
      return NULL;
  }

  py_hadj = pygobject_new ((GObject *)hadj);
  py_vadj = pygobject_new ((GObject *)vadj);

  return Py_BuildValue ("(NN)", py_hadj, py_vadj);
}
%%
override mx_button_group_get_buttons noargs
static PyObject *
_wrap_mx_button_group_get_buttons (PyGObject *self)
{
  const GSList *buttons;
  GSList *l;
  PyObject *py_list;

  buttons = mx_button_group_get_buttons (MX_BUTTON_GROUP (self->obj));

  py_list = PyList_New (0);

  for (l = (GSList *)buttons; l != NULL; l = l->next)
    {
      PyObject *py_button;

      py_button = pygobject_new (G_OBJECT (l->data));
      if (!py_button)
        {
          Py_DECREF (py_list);
          return NULL;
        }

      PyList_Append (py_list, py_button);
      Py_DECREF (py_button);
    }

  return py_list;
}
%%
override mx_application_get_windows noargs
static PyObject *
_wrap_mx_application_get_windows (PyGObject *self)
{
  const GList *windows;
  GList *l;
  PyObject *py_list;

  windows = mx_application_get_windows (MX_APPLICATION (self->obj));

  py_list = PyList_New (0);

  for (l = (GList *)windows; l != NULL; l = l->next)
    {
      PyObject *py_window;

      py_window = pygobject_new (G_OBJECT (l->data));
      if (!py_window)
        {
          Py_DECREF (py_list);
          return NULL;
        }

      PyList_Append (py_list, py_window);
      Py_DECREF (py_window);
    }

  return py_list;
}
%%
override mx_application_get_actions noargs
static PyObject *
_wrap_mx_application_get_actions (PyGObject *self)
{
  GList *actions, *l;
  PyObject *py_list;

  actions = mx_application_get_actions (MX_APPLICATION (self->obj));

  py_list = PyList_New (0);

  for (l = actions; l != NULL; l = l->next)
    {
      PyObject *py_action;

      py_action = pygobject_new (G_OBJECT (l->data));
      if (!py_action)
        {
          Py_DECREF (py_list);
          return NULL;
        }

      PyList_Append (py_list, py_action);
      Py_DECREF (py_action);
    }

  g_list_free (actions);
  return py_list;
}
%%
override mx_icon_theme_set_search_paths kwargs
static PyObject *
_wrap_mx_icon_theme_set_search_paths (PyGObject *self,
                                     PyObject  *args,
                                     PyObject  *kwargs)
{
  static char *kwlist[] = { "paths", NULL };
  PyObject *py_paths;
  int i;
  GList *paths = NULL;

  if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                    "O:IconTheme.set_search_paths",
                                    kwlist, &py_paths))
    return NULL;

  if (!PySequence_Check (py_paths))
    {
      PyErr_SetString (PyExc_TypeError, "paths need to be a list or tuple "
                       "of strings");
      return NULL;
    }

  for (i = 0; i < PySequence_Size (py_paths); i++)
    {
      PyObject *py_path;
      
      py_path = PySequence_GetItem (py_paths, i);
      if (!PyString_Check (py_path))
        {
          PyErr_SetString (PyExc_TypeError, "expecting a string");
          g_list_free (paths);
          return NULL;
        }

      paths = g_list_append (paths, g_strdup (PyString_AsString (py_path)));
      Py_DECREF (py_path);
    }
  mx_icon_theme_set_search_paths (MX_ICON_THEME (self->obj), paths);
  g_list_free (paths);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override mx_icon_theme_get_search_paths noargs
static PyObject *
_wrap_mx_icon_theme_get_search_paths (PyGObject *self)
{
  const GList *paths, *l;
  PyObject *py_paths;
  
  py_paths = PyList_New (0);
  paths = mx_icon_theme_get_search_paths (MX_ICON_THEME (self->obj));

  for (l = paths; l != NULL; l = l->next)
    {
      PyList_Append (py_paths, PyString_FromString (l->data));
    }

  return py_paths;
}
%%
override mx_window_get_window_position noargs
static PyObject *
_wrap_mx_window_get_window_position (PyGObject *self)
{
  gint x, y;

  mx_window_get_window_position (MX_WINDOW (self->obj), &x, &y);

  return Py_BuildValue ("(ii)", x, y);
}
